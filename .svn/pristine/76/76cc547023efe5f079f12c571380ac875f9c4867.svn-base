<?php

namespace App\Http\Controllers;

//use Illuminate\Http\Request;

use App\Http\Requests;

use Request;

use Response;

use App\Models\Statement;

use App\IlrsCore\IlrsCoreStatement;

use Illuminate\Pagination\Paginator;

use Carbon\Carbon;

class StatementController extends ApiBaseController
{

    public function getActivityLog()
    {
        $perPage = config('ilrs-config.RECORD_PER_PAGE');
        $page = 1;
        if(isset($_GET['page']))
        {
            $page = ($_GET['page']*$perPage)-($perPage-1);
        }
        $statements   = Statement::latest('created_at')->paginate($perPage);
        return view('statement.activitylog', compact('statements', 'page'));
    }

    public function saveStatements(Request $request)
    {
        $incrementValue = Statement::latest('created_at')->first();
        $statementId = 1;
        if(isset($incrementValue)){
            $statementId = (int)$incrementValue->_id + 1;
        }
        $IlrsObj = new IlrsCoreStatement();
        $data = $IlrsObj->getStatementInputs($request);
        $input = array();
        $input['_id'] = $statementId;
        $input['statement'] = $data;
        $content = $data['id'];
        $statement = new Statement($input);
        $statement->save();
        $location = config('ilrs-config.BASE_XAPI_URL').'/'.config('ilrs-routename.STATEMENT').'?statementId='.$content;
        return response($content, '201')
            ->header('Location', $location);
    }

    public function show(Request $request, $id)
    {
        $id = (int)$id;
        $statement    =   Statement::findOrFail($id);
        return view('statement.show', $statement->toArray());
        //return Response::json($statement, 200, array(), JSON_PRETTY_PRINT);
    }

    public function getStatementDetailsById(Request $request)
    {
        $data = $request::all();
        $id = $data['statementId'];
        $statement    =   Statement::where('statement.id', $id)->get()->toArray();
        //return stripcslashes(response()->json($statement));
        $json_string = json_encode($statement, JSON_PRETTY_PRINT);
        return stripcslashes($json_string);
    }

    public function updateStatements(Request $request, $id)
    {
        $IlrsObj = new IlrsCoreStatement();
        $data = $IlrsObj->getStatementInputs($request);
        $updateField = "statement";
        //print_r($data['verb']);exit;
        if($data['verb']['display']['en-US'] == "voided")
        {
            $updateField = "statement.verb";
            $data = $data['verb'];
        }
        $statementCount = Statement::where('statement.id', $id)->count();
        if($statementCount)
        {
            $updateStatement = Statement::where('statement.id', $id)
                ->update([$updateField => $data]);
            return Response('', '204');;
        }else{
            return Response('', '404');
        }
    }
}
